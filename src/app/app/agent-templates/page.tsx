"use client";
import React, { useState } from 'react';
import TemplateCard from '@/components/TemplateCard';
import TemplateModal from '@/components/TemplateModal';

const templatesData = [
  {
    title: 'Weekly Top-Sellers Report',
    category: 'Growth Agent',
    integrations: ['Shopify'],
    goal: 'Automatically generates a report every Monday morning that ranks your products by sales revenue and units sold, helping you understand what\'s driving your business.',
    kpi: 'Provides clear, consistent insight into product performance to guide marketing and inventory decisions.',
    prompt: `Create a 'Weekly Top-Sellers' report. Every Monday at 9 AM, generate a list of the top 10 best-selling products from the previous week based on total revenue. Include the number of units sold and the percentage of total revenue for each product.`
  },
  {
    title: 'New vs. Repeat Customer Analysis',
    category: 'Growth Agent',
    integrations: ['Shopify', 'Klaviyo'],
    goal: 'Delivers a monthly breakdown of your customer base, showing the revenue contribution from new customers versus returning ones, and tracks the repeat purchase rate.',
    kpi: 'Measures customer loyalty and the effectiveness of retention marketing efforts.',
    prompt: `Create a 'Customer Base Analysis' report. On the 1st of every month, analyze the previous month's sales. Calculate the total revenue from new customers versus repeat customers and report the repeat customer rate. Compare these metrics to the prior month.`
  },
  {
    title: 'Ad Campaign Performance Review',
    category: 'Growth Agent',
    integrations: ['Meta Ads', 'Google Ads', 'Shopify'],
    goal: 'Synthesizes performance data from your ad platforms into a single weekly report, highlighting the most and least effective campaigns based on Return On Ad Spend (ROAS).',
    kpi: 'Improves marketing efficiency by enabling quick budget reallocation to high-performing campaigns.',
    prompt: `Create a 'Weekly Ad Performance' review. Every Monday, pull performance data from Meta Ads and Google Ads. List the top 3 campaigns by ROAS and the bottom 3 campaigns by ROAS. Include total spend and revenue for each, and recommend pausing the worst performer.`
  },
  {
    title: 'Underperforming Product Identifier',
    category: 'Growth Agent',
    integrations: ['Shopify'],
    goal: 'Scans your product catalog monthly to identify items with high inventory levels but low sales velocity, helping you clear out "dead stock" before it becomes a bigger problem.',
    kpi: 'Frees up cash flow by identifying slow-moving inventory for clearance or discontinuation.',
    prompt: `Create a 'Dead Stock' report. On the 1st of every month, generate a list of all products that have sold fewer than 5 units in the last 90 days but have more than 50 units in stock. Rank them by the total value of their on-hand inventory.`
  },
  {
    title: 'Quarterly Category Deep Dive',
    category: 'Growth Agent',
    integrations: ['Shopify', 'Google Analytics'],
    goal: 'Provides a high-level review each quarter, analyzing the sales performance and growth trends of your different product categories to inform long-term strategy.',
    kpi: 'Identifies strategic growth opportunities and declining trends at the category level.',
    prompt: `Create a 'Quarterly Category Review'. On the first day of each quarter, analyze the sales performance of all product categories from the previous quarter. Rank categories by total revenue and by percentage growth compared to the quarter before that. Identify the top traffic source for the highest-growth category.`
  },
  // --- Alert Agents ---
  {
    title: 'Bestseller Low Inventory Warning',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'Monitors your top-selling products in real-time and sends an immediate notification when inventory drops below a critical threshold, helping you prevent costly stockouts.',
    kpi: 'Prevents lost sales by ensuring your most popular items remain in stock.',
    prompt: `Create a 'Bestseller Stock Alert'. For my top 10 best-selling products of the last 30 days, monitor their inventory levels continuously. Notify me immediately if the stock for any of these products falls below 15 units.`
  },
  {
    title: 'Daily Revenue Drop Alert',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'Actively compares today\'s revenue to the same day last week. If a significant drop is detected, it alerts you so you can investigate potential site issues or market changes.',
    kpi: 'Enables rapid response to sales downturns, minimizing potential losses.',
    prompt: `Create a 'Revenue Drop' alert. Every day at 4 PM, compare the total revenue generated so far today to the revenue generated by 4 PM on the same day last week. If today's revenue is more than 30% lower, send an immediate notification.`
  },
  {
    title: 'High Refund Rate Warning',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'Keeps an eye on your refund rates. If the rate for a specific product spikes, this agent alerts you to a potential quality issue or a mismatch in customer expectations.',
    kpi: 'Protects brand reputation and profits by quickly identifying problematic products.',
    prompt: `Create a 'High Refund Rate' alert. Monitor all products on a rolling 7-day basis. If the refund rate for any single product exceeds 10% on more than 20 orders, send me an alert with the product name and its current refund rate.`
  },
  {
    title: 'Discount Code Velocity Alert',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'Monitors the usage of a specific, high-value discount code to prevent abuse or viral spread. Alerts you if the code is used more than a set number of times in a short period.',
    kpi: 'Prevents margin erosion from unintended or fraudulent use of discount codes.',
    prompt: `Create a 'Discount Code' alert for the code "WELCOME50". Notify me immediately if this code is used more than 25 times within any 1-hour period.`
  },
  {
    title: 'Checkout Abandonment Spike Alert',
    category: 'Alert Agent',
    integrations: ['Shopify', 'Google Analytics'],
    goal: 'Tracks your checkout abandonment rate in real-time. If the rate suddenly increases, it sends an alert, indicating a potential technical issue with your payment or shipping process.',
    kpi: 'Recovers potentially lost sales by flagging friction points in the checkout process.',
    prompt: `Create a 'Checkout Abandonment' alert. Monitor the checkout abandonment rate hourly. If the rate for the last hour is 20% higher than the daily average, send an alert to investigate for potential issues.`
  },
  {
    title: 'Customer Lifetime Value (CLV) Cohort Analysis',
    category: 'Growth Agent',
    integrations: ['Shopify'],
    goal: 'Groups customers into monthly cohorts based on their first purchase date and tracks their cumulative spending over time to measure long-term value.',
    kpi: 'Reveals which acquisition months produce the most valuable customers, improving long-term ROI analysis.',
    prompt: `Create a 'CLV Cohort' analysis. On a monthly basis, generate a report showing the 3-month and 6-month average customer lifetime value for cohorts acquired in each of the last six months.`
  },
  {
    title: 'Landing Page Performance Report',
    category: 'Growth Agent',
    integrations: ['Google Analytics', 'Shopify'],
    goal: 'Analyzes the conversion rates of your top landing pages to determine which ones are most effective at turning visitors into customers.',
    kpi: 'Identifies high-performing pages to replicate and underperforming pages to optimize.',
    prompt: `Create a 'Landing Page Performance' report. Every week, list the top 10 landing pages by sessions from Google Analytics. For each page, report its conversion rate and total revenue generated from its visitors.`
  },
  {
    title: 'At-Risk Customer Segment Identifier',
    category: 'Growth Agent',
    integrations: ['Shopify', 'Klaviyo'],
    goal: 'Creates a dynamic segment of customers who have not purchased in a while but were previously frequent buyers, allowing you to target them with win-back campaigns.',
    kpi: 'Increases customer retention by proactively engaging customers who are likely to churn.',
    prompt: `Create an 'At-Risk Customer' segment. Every Monday, generate a list of customers who have made 3+ lifetime purchases but have not bought anything in the last 90 days. Automatically sync this list to Klaviyo.`
  },
  {
    title: 'Product Margin Analysis',
    category: 'Growth Agent',
    integrations: ['Shopify'],
    goal: 'Reviews your product catalog to identify items with the highest and lowest profit margins, assuming cost-of-goods is available in Shopify.',
    kpi: 'Focuses marketing and sales efforts on the most profitable products for the business.',
    prompt: `Create a 'Product Margin' report. Monthly, analyze all products with a 'cost' value entered. List the top 10 products by profit margin percentage and the bottom 10 products by profit margin percentage.`
  },
  {
    title: 'Post-Purchase Upsell Effectiveness',
    category: 'Growth Agent',
    integrations: ['Shopify'],
    goal: 'Tracks how often customers accept post-purchase upsell offers and calculates the total additional revenue generated from these offers.',
    kpi: 'Measures and helps optimize the effectiveness of your Average Order Value (AOV) boosting strategies.',
    prompt: `Create an 'Upsell Effectiveness' report. Weekly, calculate the take rate of post-purchase upsell offers and the total revenue generated. Compare this week's take rate to the monthly average.`
  },
  {
    title: 'High-Return Product Investigator',
    category: 'Growth Agent',
    integrations: ['Shopify'],
    goal: 'Identifies products with the highest return rates over the last month, helping you spot potential quality control issues or misleading product descriptions.',
    kpi: 'Reduces return rates by highlighting products that create dissatisfied customers.',
    prompt: `Create a 'High-Return Product' report. On the 1st of every month, identify the top 5 products with the highest return rate as a percentage of their total sales from the previous month.`
  },
  {
    title: 'Affiliate & Referral Program Tracker',
    category: 'Growth Agent',
    integrations: ['Shopify'],
    goal: 'Monitors sales generated through discount codes associated with affiliates or referral programs to measure the effectiveness and ROI of your partnerships.',
    kpi: 'Provides clear data on which affiliates are driving the most value for your brand.',
    prompt: `Create an 'Affiliate Program' report. Weekly, track the number of uses and total revenue generated by discount codes starting with "AFF-". Rank the top 5 codes by revenue.`
  },
  {
    title: 'Email Flow Entry Point Analysis',
    category: 'Growth Agent',
    integrations: ['Klaviyo', 'Shopify'],
    goal: 'Analyzes which sign-up forms or lead magnets are producing the most valuable email subscribers, measured by their eventual purchase rate.',
    kpi: 'Optimizes lead generation efforts by focusing on sources that attract converting customers.',
    prompt: `Create an 'Email Signup Source' report. Monthly, analyze new subscribers in Klaviyo and track their first-time purchase rate within 30 days, segmented by their original signup source.`
  },
  {
    title: 'Geographic Sales Performance',
    category: 'Growth Agent',
    integrations: ['Shopify'],
    goal: 'Breaks down sales data by country or state/region to identify emerging markets or areas where marketing efforts are most successful.',
    kpi: 'Informs targeted marketing campaigns and shipping strategy by highlighting key geographic regions.',
    prompt: `Create a 'Geographic Sales' report. Monthly, rank the top 10 countries by total sales revenue. For the top country, provide a breakdown of sales by its top 5 states or regions.`
  },
  // --- Alert Agents (continued) ---
  {
    title: 'Large Order Notification',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'Sends an immediate notification when an unusually large order is placed, which can be an indicator of a B2B opportunity or potential fraud.',
    kpi: 'Enables quick fraud review and allows for special customer service attention for high-value orders.',
    prompt: `Create a 'Large Order' alert. Notify me immediately if any single order is placed with a total value over $1,000.`
  },
  {
    title: 'Site Speed Degradation Alert',
    category: 'Alert Agent',
    integrations: ['Google Analytics'],
    goal: 'Monitors your site\'s average page load time. If it slows down significantly, it sends an alert, as speed is critical for user experience and conversions.',
    kpi: 'Protects conversion rates by quickly flagging technical issues that impact site performance.',
    prompt: `Create a 'Site Speed' alert. Daily, check the Average Page Load Time in Google Analytics. If it is 15% higher than the weekly average, send a notification.`
  },
  {
    title: 'Zero Sales Day Alert',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'Alerts you if no sales have been recorded by the end of the day, which could indicate a critical, unnoticed issue with your website or payment processing.',
    kpi: 'Acts as a final safety net for detecting catastrophic site failures.',
    prompt: `Create a 'Zero Sales' alert. If by 10 PM in the store's timezone, the total order count for the day is still zero, send an immediate, high-priority alert.`
  },
  {
    title: 'Sudden Ad Cost Spike Alert',
    category: 'Alert Agent',
    integrations: ['Meta Ads', 'Google Ads'],
    goal: 'Monitors the Cost Per Click (CPC) or Cost Per Mille (CPM) on your main ad platforms. If costs suddenly spike, it alerts you to check for auction competition or ad fatigue.',
    kpi: 'Prevents budget waste by flagging inefficient ad spend in real-time.',
    prompt: `Create an 'Ad Cost Spike' alert. For my main Meta Ads campaigns, notify me if the daily average CPC increases by more than 50% compared to the 7-day average.`
  },
  {
    title: '404 Error Spike Alert',
    category: 'Alert Agent',
    integrations: ['Google Analytics'],
    goal: 'Keeps an eye on "Page Not Found" (404) errors. A sudden increase can mean broken links from an email campaign or a bad site update, which frustrates users.',
    kpi: 'Improves user experience by quickly identifying and allowing you to fix broken links.',
    prompt: `Create a '404 Error' alert. Monitor the number of 404 errors reported in Google Analytics. If the hourly count is 10 times higher than the daily average, send an alert.`
  },
  {
    title: 'Payment Gateway Error Alert',
    category: 'Alert Agent',
    integrations: ['Gorgias', 'Shopify'],
    goal: 'Monitors customer support tickets for mentions of payment failures (e.g., "credit card declined," "can\'t checkout"), which are leading indicators of a payment gateway issue.',
    kpi: 'Minimizes lost sales by providing an early warning of checkout-crippling technical problems.',
    prompt: `Create a 'Payment Error' alert. Monitor incoming Gorgias tickets. If more than 3 tickets in any 1-hour period contain the phrases "payment failed," "checkout error," or "can't pay," send a notification.`
  },
  {
    title: 'Returned Item Restock Alert',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'When a popular item that was previously out of stock is returned and restocked, this agent can notify you to make it available for sale again.',
    kpi: 'Accelerates the resale of returned items, especially for products with a waitlist.',
    prompt: `Create a 'Returned Restock' alert. If an item with "waitlist" in its product tags is returned and its inventory moves from 0 to 1, send me a notification.`
  },
  {
    title: 'Unusually High Discount Value Alert',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'Watches for orders where the total discount amount is abnormally high, which can be a sign of discount code stacking or a misconfigured promotion.',
    kpi: 'Protects profit margins by catching costly errors in discount configuration.',
    prompt: `Create a 'High Discount' alert. Notify me immediately if any order is completed where the discount amount is greater than 70% of the order's subtotal.`
  },
  {
    title: 'Negative Social Ad Comment Alert',
    category: 'Alert Agent',
    integrations: ['Meta Ads'],
    goal: 'Monitors comments on your active Facebook and Instagram ads for negative keywords, allowing your team to quickly address customer complaints or PR issues.',
    kpi: 'Protects brand reputation by enabling rapid response to negative social media feedback.',
    prompt: `Create a 'Negative Comment' alert. For all active Meta Ads, monitor new comments. If any comment contains keywords like "scam," "never arrived," "terrible," or "don't buy," send an alert with the comment text and a link to the ad.`
  },
  {
    title: 'Slow-Seller Restock Warning',
    category: 'Alert Agent',
    integrations: ['Shopify'],
    goal: 'Alerts you if a purchase order is created for a product that has been identified as a slow-moving item, preventing accidental reordering of dead stock.',
    kpi: 'Prevents wasteful inventory spending and accumulation of unsellable products.',
    prompt: `Create a 'Slow-Seller Restock' alert. If a purchase order is created for any product SKU that has sold fewer than 10 units in the last 180 days, send a confirmation alert before the order is placed.`
  }
];

export default function AgentTemplatesPage() {
  // Filtering state
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [selectedIntegrations, setSelectedIntegrations] = useState<string[]>([]);

  // Modal state
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<typeof templatesData[0] | null>(null);

  // Get unique categories and integrations for filter options
  const categories = ['All', ...Array.from(new Set(templatesData.map(template => template.category)))];
  const allIntegrations = Array.from(new Set(templatesData.flatMap(template => template.integrations)));

  // Filtered templates logic
  const filteredTemplates = templatesData.filter(template => {
    const matchesSearch = searchTerm === '' || 
      template.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      template.goal.toLowerCase().includes(searchTerm.toLowerCase()) ||
      template.kpi.toLowerCase().includes(searchTerm.toLowerCase()) ||
      template.prompt.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'All' || template.category === selectedCategory;
    const matchesIntegrations = selectedIntegrations.length === 0 || 
      selectedIntegrations.every(integration => template.integrations.includes(integration));
    return matchesSearch && matchesCategory && matchesIntegrations;
  });

  const handleIntegrationToggle = (integration: string) => {
    setSelectedIntegrations(prev => 
      prev.includes(integration)
        ? prev.filter(item => item !== integration)
        : [...prev, integration]
    );
  };

  // Handle card click to open modal
  const handleCardClick = (template: typeof templatesData[0]) => {
    setSelectedTemplate(template);
    setModalOpen(true);
  };

  return (
    <div className="min-h-[calc(100vh-64px)] bg-[#141718] pt-0 px-2 sm:px-4 md:px-8 lg:px-10 font-inter">
      {/* Header Section */}
      <div className="w-full px-0">
        <h1 className="text-2xl sm:text-3xl md:text-[35px] text-white font-light mb-2 mt-0">Template Library</h1>
        <p className="text-lg text-[#7B7B7B] mb-10">Discover and deploy pre-built AI agents to automate growth, reporting, and operations.</p>
      </div>

      {/* Filters Container */}
      <div className="filters-container mb-8">
        <div className="flex flex-col gap-4">
          {/* Search Input */}
          <div className="flex-1">
            <input
              type="text"
              placeholder="Search templates..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-4 py-3 bg-[#1E2124] border border-[#2A2D31] rounded-lg text-white placeholder-[#7B7B7B] focus:outline-none focus:border-[#3A3D41]"
            />
          </div>
          
          <div className="flex flex-col md:flex-row gap-4">
            {/* Category Filter */}
            <div className="md:w-48">
              <select 
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full px-4 py-3 bg-[#1E2124] border border-[#2A2D31] rounded-lg text-white focus:outline-none focus:border-[#3A3D41]"
              >
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>
            
            {/* Integration Filter */}
            <div className="flex-1">
              <div className="flex flex-wrap gap-2">
                <span className="text-[#7B7B7B] text-sm self-center mr-2">Integrations:</span>
                {allIntegrations.map(integration => (
                  <button
                    key={integration}
                    onClick={() => handleIntegrationToggle(integration)}
                    className={`px-3 py-1 rounded-full text-sm transition-colors ${
                      selectedIntegrations.includes(integration)
                        ? 'bg-[#A78BFA] text-white border border-[#A78BFA]'
                        : 'bg-[#2A2D31] text-[#7B7B7B] border border-[#2A2D31] hover:border-[#3A3D41]'
                    }`}
                  >
                    {integration}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Results Count */}
      <div className="mb-6">
        <p className="text-[#7B7B7B] text-sm">
          Showing {filteredTemplates.length} of {templatesData.length} templates
        </p>
      </div>

      {/* Template Grid */}
      <div className="template-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredTemplates.map((template, index) => (
          <div key={index} onClick={() => handleCardClick(template)} className="cursor-pointer">
            <TemplateCard
              title={template.title}
              description={template.goal}
              category={template.category}
              integrations={template.integrations}
            />
          </div>
        ))}
      </div>

      {/* No Results Message */}
      {filteredTemplates.length === 0 && (
        <div className="text-center py-12">
          <p className="text-[#7B7B7B] text-lg">No templates found matching your criteria.</p>
          <button 
            onClick={() => {
              setSearchTerm('');
              setSelectedCategory('All');
              setSelectedIntegrations([]);
            }}
            className="mt-4 px-4 py-2 bg-[#2A2D31] text-white rounded-lg hover:bg-[#3A3D41] transition-colors"
          >
            Clear Filters
          </button>
        </div>
      )}

      {/* Template Modal */}
      <TemplateModal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        template={selectedTemplate}
      />
    </div>
  );
} 